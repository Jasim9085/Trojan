# Name of your workflow
name: Android CI Build

# Controls when the workflow will run
on:
  push:
    branches: [ "v2" ]
  pull_request:
    branches: [ "v2" ]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checks-out your repository, including your google-services.json and gradlew files
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Java Development Kit (JDK)
      # The gradlew script will use this JDK.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # --- NEW (OPTIONAL BUT RECOMMENDED): Cache Gradle dependencies ---
      # This step speeds up future builds by caching the downloaded libraries.
      # It is different from the build cache that was causing the error.
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # --- NEW & CRITICAL: Grant execute permission for gradlew ---
      # On a fresh checkout on a Linux runner, the gradlew script might not be executable.
      # This command fixes that and prevents a "permission denied" error.
      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      # --- CRITICAL FIX: The build command is now updated ---
      # It now uses the Gradle Wrapper (./gradlew) which is the standard.
      # It calls 'clean' first to delete all old files and prevent caching issues.
      # Then it calls 'assembleDebug' to build the APK.
      - name: Build with Gradle
        run: ./gradlew clean assembleDebug

      # Step 5: Upload the build artifact (the APK)
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
